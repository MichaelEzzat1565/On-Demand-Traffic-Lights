
On Demand Traffic Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000844  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000008b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001239  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c1  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095d  00000000  00000000  000023fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00002d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057b  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000639  00000000  00000000  00003507  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  74:	0c 94 20 04 	jmp	0x840	; 0x840 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <readCarsLEDsState>:
}

// this function to read cars' green LED state
void readCarsLEDsState(EN_CarsLEDsState_t* Cars_Green_LED)
{
	if((READ_BIT(PINA, PIN0) == 0)) // if the LED is off
  7c:	c8 99       	sbic	0x19, 0	; 25
  7e:	03 c0       	rjmp	.+6      	; 0x86 <readCarsLEDsState+0xa>
	{
	   cars_LEDs_State = GREEN_OFF;  // put GREEN_OFF in the global enum variable
  80:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <cars_LEDs_State>
  84:	08 95       	ret
	}
	else if((READ_BIT(PINA, PIN0) == 1))  // if the LED is on
  86:	c8 9b       	sbis	0x19, 0	; 25
  88:	03 c0       	rjmp	.+6      	; 0x90 <readCarsLEDsState+0x14>
	{
	   cars_LEDs_State = GREEN_ON;  // put GREEN_ON in the global enum variable
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <cars_LEDs_State>
  90:	08 95       	ret

00000092 <__vector_1>:
   }	     
}

// Interrupt handelling if a pedesterian pressed the button
ISR(EXT_INT_0)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	Mode_State = PEDESTERIAN;  // change the mode to pedestrian mode
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	readCarsLEDsState(&cars_LEDs_State);  // read cars' green LED is on or off
  ba:	81 e6       	ldi	r24, 0x61	; 97
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 3e 00 	call	0x7c	; 0x7c <readCarsLEDsState>
}
  c2:	ff 91       	pop	r31
  c4:	ef 91       	pop	r30
  c6:	bf 91       	pop	r27
  c8:	af 91       	pop	r26
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	7f 91       	pop	r23
  d0:	6f 91       	pop	r22
  d2:	5f 91       	pop	r21
  d4:	4f 91       	pop	r20
  d6:	3f 91       	pop	r19
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <main>:
		APP_start();
    }*/
	
	while(1)
	{
		test();
  e4:	0e 94 8e 01 	call	0x31c	; 0x31c <test>
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <main>

000000ea <Timer0_init>:
// function implementation
//tihs function to select timer's mode
void Timer0_init(uint32_t timer_mode)
{
	// choose timer mode
	TCCR0 = timer_mode; // Normal mode
  ea:	83 bf       	out	0x33, r24	; 51
  ec:	08 95       	ret

000000ee <Timer0_start>:
}
//this function start the timer by setting it's prescaler
void Timer0_start(uint32_t Prescaler)
{
	// Timer statr -> set the Prescaler(setting the clock source)
	switch(Prescaler)
  ee:	88 30       	cpi	r24, 0x08	; 8
  f0:	91 05       	cpc	r25, r1
  f2:	c1 f0       	breq	.+48     	; 0x124 <Timer0_start+0x36>
  f4:	38 f4       	brcc	.+14     	; 0x104 <Timer0_start+0x16>
  f6:	86 30       	cpi	r24, 0x06	; 6
  f8:	91 05       	cpc	r25, r1
  fa:	51 f1       	breq	.+84     	; 0x150 <Timer0_start+0x62>
  fc:	80 f5       	brcc	.+96     	; 0x15e <Timer0_start+0x70>
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	69 f0       	breq	.+26     	; 0x11c <Timer0_start+0x2e>
 102:	08 95       	ret
 104:	89 30       	cpi	r24, 0x09	; 9
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	92 07       	cpc	r25, r18
 10a:	b9 f0       	breq	.+46     	; 0x13a <Timer0_start+0x4c>
 10c:	81 15       	cp	r24, r1
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	92 07       	cpc	r25, r18
 112:	b9 f0       	breq	.+46     	; 0x142 <Timer0_start+0x54>
 114:	80 34       	cpi	r24, 0x40	; 64
 116:	91 05       	cpc	r25, r1
 118:	59 f5       	brne	.+86     	; 0x170 <Timer0_start+0x82>
 11a:	08 c0       	rjmp	.+16     	; 0x12c <Timer0_start+0x3e>
	{
		case No_prescaler:  // no prescaler
		   SET_BIT(TCCR0, 0); 
 11c:	83 b7       	in	r24, 0x33	; 51
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	83 bf       	out	0x33, r24	; 51
		   break;
 122:	08 95       	ret
		case CLK_8:   // prescaler is 8
		   SET_BIT(TCCR0, 1); 
 124:	83 b7       	in	r24, 0x33	; 51
 126:	82 60       	ori	r24, 0x02	; 2
 128:	83 bf       	out	0x33, r24	; 51
		   break;
 12a:	08 95       	ret
		case CLK_64:  // prescaler is 64
		  SET_BIT(TCCR0, 0);
 12c:	83 b7       	in	r24, 0x33	; 51
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	83 bf       	out	0x33, r24	; 51
		  SET_BIT(TCCR0, 1);
 132:	83 b7       	in	r24, 0x33	; 51
 134:	82 60       	ori	r24, 0x02	; 2
 136:	83 bf       	out	0x33, r24	; 51
		  break;
 138:	08 95       	ret
		case CLK_256:      // prescaler is 256
		  SET_BIT(TCCR0, 2);
 13a:	83 b7       	in	r24, 0x33	; 51
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	83 bf       	out	0x33, r24	; 51
		  break;
 140:	08 95       	ret
		case CLK_1024:     // prescaler is 1024
	   	  SET_BIT(TCCR0, 0);
 142:	83 b7       	in	r24, 0x33	; 51
 144:	81 60       	ori	r24, 0x01	; 1
 146:	83 bf       	out	0x33, r24	; 51
		  SET_BIT(TCCR0, 2);
 148:	83 b7       	in	r24, 0x33	; 51
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	83 bf       	out	0x33, r24	; 51
		  break;
 14e:	08 95       	ret
		case External_Falling_Edge:   // counting at falling edge
		  SET_BIT(TCCR0, 1);
 150:	83 b7       	in	r24, 0x33	; 51
 152:	82 60       	ori	r24, 0x02	; 2
 154:	83 bf       	out	0x33, r24	; 51
		  SET_BIT(TCCR0, 2);
 156:	83 b7       	in	r24, 0x33	; 51
 158:	84 60       	ori	r24, 0x04	; 4
 15a:	83 bf       	out	0x33, r24	; 51
		  break;
 15c:	08 95       	ret
		case External_Rising_Edge:   // counting at rising edge
		  SET_BIT(TCCR0, 0);
 15e:	83 b7       	in	r24, 0x33	; 51
 160:	81 60       	ori	r24, 0x01	; 1
 162:	83 bf       	out	0x33, r24	; 51
		  SET_BIT(TCCR0, 1);
 164:	83 b7       	in	r24, 0x33	; 51
 166:	82 60       	ori	r24, 0x02	; 2
 168:	83 bf       	out	0x33, r24	; 51
		  SET_BIT(TCCR0, 2);
 16a:	83 b7       	in	r24, 0x33	; 51
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	83 bf       	out	0x33, r24	; 51
 170:	08 95       	ret

00000172 <Timer0_stop>:
}

//this function stop the timer
void Timer0_stop(void)
{
	TCCR0 = 0x00;  // make all bits in the register to 0
 172:	13 be       	out	0x33, r1	; 51
 174:	08 95       	ret

00000176 <Timer0_Delay_NormalMode>:
}

//this function makes timer starting to count a dellay time
void Timer0_Delay_NormalMode(uint32_t Dellay_ms , uint32_t Prescaler)
{
 176:	4f 92       	push	r4
 178:	5f 92       	push	r5
 17a:	6f 92       	push	r6
 17c:	7f 92       	push	r7
 17e:	8f 92       	push	r8
 180:	9f 92       	push	r9
 182:	af 92       	push	r10
 184:	bf 92       	push	r11
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	00 d0       	rcall	.+0      	; 0x194 <Timer0_Delay_NormalMode+0x1e>
 194:	00 d0       	rcall	.+0      	; 0x196 <Timer0_Delay_NormalMode+0x20>
 196:	00 d0       	rcall	.+0      	; 0x198 <Timer0_Delay_NormalMode+0x22>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	9e 83       	std	Y+6, r25	; 0x06
 19e:	8d 83       	std	Y+5, r24	; 0x05
	   double timer_initial_value = 0;  // timer initial value
	   uint16_t Number_Of_Overflows = 0;    // number of overflows
	   uint32_t Overflow_Counter = 0;   // to count the number of overflows have been done
	   double tick_time;    // the time of one tick
	   double time_max_delay;   // timer maximum delay
	   tick_time = (double)Prescaler/ (double)CPU_Frequency;  // calculate the tick time
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 bb 02 	call	0x576	; 0x576 <__floatunsisf>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	4a e7       	ldi	r20, 0x7A	; 122
 1ae:	54 e4       	ldi	r21, 0x44	; 68
 1b0:	0e 94 1a 02 	call	0x434	; 0x434 <__divsf3>
 1b4:	69 83       	std	Y+1, r22	; 0x01
 1b6:	7a 83       	std	Y+2, r23	; 0x02
 1b8:	8b 83       	std	Y+3, r24	; 0x03
 1ba:	9c 83       	std	Y+4, r25	; 0x04
	   time_max_delay = tick_time * 256.0;   // calculate the maximum delay
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e8       	ldi	r20, 0x80	; 128
 1c2:	53 e4       	ldi	r21, 0x43	; 67
 1c4:	0e 94 b3 03 	call	0x766	; 0x766 <__mulsf3>
 1c8:	4b 01       	movw	r8, r22
 1ca:	5c 01       	movw	r10, r24
	   if(Dellay_ms < time_max_delay)  // if the delay req. is less than the max. dealy
 1cc:	2d 81       	ldd	r18, Y+5	; 0x05
 1ce:	3e 81       	ldd	r19, Y+6	; 0x06
 1d0:	b9 01       	movw	r22, r18
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 bb 02 	call	0x576	; 0x576 <__floatunsisf>
 1da:	6b 01       	movw	r12, r22
 1dc:	7c 01       	movw	r14, r24
 1de:	9b 01       	movw	r18, r22
 1e0:	ac 01       	movw	r20, r24
 1e2:	c5 01       	movw	r24, r10
 1e4:	b4 01       	movw	r22, r8
 1e6:	0e 94 ae 03 	call	0x75c	; 0x75c <__gesf2>
 1ea:	18 16       	cp	r1, r24
 1ec:	9c f4       	brge	.+38     	; 0x214 <Timer0_Delay_NormalMode+0x9e>
	   {
		   Number_Of_Overflows = 1;  // we only need one overflow
		   timer_initial_value = ((time_max_delay - (double)Dellay_ms)/tick_time);   // calculate the initial value that the timer should start from
 1ee:	a7 01       	movw	r20, r14
 1f0:	96 01       	movw	r18, r12
 1f2:	c5 01       	movw	r24, r10
 1f4:	b4 01       	movw	r22, r8
 1f6:	0e 94 91 01 	call	0x322	; 0x322 <__subsf3>
 1fa:	29 81       	ldd	r18, Y+1	; 0x01
 1fc:	3a 81       	ldd	r19, Y+2	; 0x02
 1fe:	4b 81       	ldd	r20, Y+3	; 0x03
 200:	5c 81       	ldd	r21, Y+4	; 0x04
 202:	0e 94 1a 02 	call	0x434	; 0x434 <__divsf3>
 206:	2b 01       	movw	r4, r22
 208:	3c 01       	movw	r6, r24
	   double time_max_delay;   // timer maximum delay
	   tick_time = (double)Prescaler/ (double)CPU_Frequency;  // calculate the tick time
	   time_max_delay = tick_time * 256.0;   // calculate the maximum delay
	   if(Dellay_ms < time_max_delay)  // if the delay req. is less than the max. dealy
	   {
		   Number_Of_Overflows = 1;  // we only need one overflow
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	9e 83       	std	Y+6, r25	; 0x06
 210:	8d 83       	std	Y+5, r24	; 0x05
 212:	05 c0       	rjmp	.+10     	; 0x21e <Timer0_Delay_NormalMode+0xa8>

//this function makes timer starting to count a dellay time
void Timer0_Delay_NormalMode(uint32_t Dellay_ms , uint32_t Prescaler)
{
	   double timer_initial_value = 0;  // timer initial value
	   uint16_t Number_Of_Overflows = 0;    // number of overflows
 214:	1e 82       	std	Y+6, r1	; 0x06
 216:	1d 82       	std	Y+5, r1	; 0x05
}

//this function makes timer starting to count a dellay time
void Timer0_Delay_NormalMode(uint32_t Dellay_ms , uint32_t Prescaler)
{
	   double timer_initial_value = 0;  // timer initial value
 218:	41 2c       	mov	r4, r1
 21a:	51 2c       	mov	r5, r1
 21c:	32 01       	movw	r6, r4
	   if(Dellay_ms < time_max_delay)  // if the delay req. is less than the max. dealy
	   {
		   Number_Of_Overflows = 1;  // we only need one overflow
		   timer_initial_value = ((time_max_delay - (double)Dellay_ms)/tick_time);   // calculate the initial value that the timer should start from
	   }
	   if(Dellay_ms == time_max_delay)   // if the delay req. is equal to the max. delay
 21e:	a7 01       	movw	r20, r14
 220:	96 01       	movw	r18, r12
 222:	c5 01       	movw	r24, r10
 224:	b4 01       	movw	r22, r8
 226:	0e 94 15 02 	call	0x42a	; 0x42a <__cmpsf2>
 22a:	81 11       	cpse	r24, r1
 22c:	07 c0       	rjmp	.+14     	; 0x23c <Timer0_Delay_NormalMode+0xc6>
	   {
		   Number_Of_Overflows = 1;   //we only need one overflow
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	3e 83       	std	Y+6, r19	; 0x06
 234:	2d 83       	std	Y+5, r18	; 0x05
		   timer_initial_value = 0;   // the timer will start from 0 because the delay is equal to the max. delay time
 236:	41 2c       	mov	r4, r1
 238:	51 2c       	mov	r5, r1
 23a:	32 01       	movw	r6, r4
	   }
	   if(Dellay_ms > time_max_delay)   // if the delay req. is more than the max. delay
 23c:	a7 01       	movw	r20, r14
 23e:	96 01       	movw	r18, r12
 240:	c5 01       	movw	r24, r10
 242:	b4 01       	movw	r22, r8
 244:	0e 94 15 02 	call	0x42a	; 0x42a <__cmpsf2>
 248:	88 23       	and	r24, r24
 24a:	6c f5       	brge	.+90     	; 0x2a6 <Timer0_Delay_NormalMode+0x130>
	   {
		   Number_Of_Overflows = ceil((double)Dellay_ms/time_max_delay);   // calculate number of needed overflows
 24c:	a5 01       	movw	r20, r10
 24e:	94 01       	movw	r18, r8
 250:	c7 01       	movw	r24, r14
 252:	b6 01       	movw	r22, r12
 254:	0e 94 1a 02 	call	0x434	; 0x434 <__divsf3>
 258:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ceil>
 25c:	0e 94 8c 02 	call	0x518	; 0x518 <__fixunssfsi>
 260:	4b 01       	movw	r8, r22
 262:	5c 01       	movw	r10, r24
 264:	7e 83       	std	Y+6, r23	; 0x06
 266:	6d 83       	std	Y+5, r22	; 0x05
		   timer_initial_value = 256.0 - (((double)Dellay_ms/tick_time)/(double)Number_Of_Overflows);   // calculate the initial value to start from
 268:	29 81       	ldd	r18, Y+1	; 0x01
 26a:	3a 81       	ldd	r19, Y+2	; 0x02
 26c:	4b 81       	ldd	r20, Y+3	; 0x03
 26e:	5c 81       	ldd	r21, Y+4	; 0x04
 270:	c7 01       	movw	r24, r14
 272:	b6 01       	movw	r22, r12
 274:	0e 94 1a 02 	call	0x434	; 0x434 <__divsf3>
 278:	6b 01       	movw	r12, r22
 27a:	7c 01       	movw	r14, r24
 27c:	b4 01       	movw	r22, r8
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 bb 02 	call	0x576	; 0x576 <__floatunsisf>
 286:	9b 01       	movw	r18, r22
 288:	ac 01       	movw	r20, r24
 28a:	c7 01       	movw	r24, r14
 28c:	b6 01       	movw	r22, r12
 28e:	0e 94 1a 02 	call	0x434	; 0x434 <__divsf3>
 292:	9b 01       	movw	r18, r22
 294:	ac 01       	movw	r20, r24
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	80 e8       	ldi	r24, 0x80	; 128
 29c:	93 e4       	ldi	r25, 0x43	; 67
 29e:	0e 94 91 01 	call	0x322	; 0x322 <__subsf3>
 2a2:	2b 01       	movw	r4, r22
 2a4:	3c 01       	movw	r6, r24
	   }
	   TCNT0 = timer_initial_value;   // set the register to the initial value
 2a6:	c3 01       	movw	r24, r6
 2a8:	b2 01       	movw	r22, r4
 2aa:	0e 94 8c 02 	call	0x518	; 0x518 <__fixunssfsi>
 2ae:	62 bf       	out	0x32, r22	; 50
//this function makes timer starting to count a dellay time
void Timer0_Delay_NormalMode(uint32_t Dellay_ms , uint32_t Prescaler)
{
	   double timer_initial_value = 0;  // timer initial value
	   uint16_t Number_Of_Overflows = 0;    // number of overflows
	   uint32_t Overflow_Counter = 0;   // to count the number of overflows have been done
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
	   {
		   Number_Of_Overflows = ceil((double)Dellay_ms/time_max_delay);   // calculate number of needed overflows
		   timer_initial_value = 256.0 - (((double)Dellay_ms/tick_time)/(double)Number_Of_Overflows);   // calculate the initial value to start from
	   }
	   TCNT0 = timer_initial_value;   // set the register to the initial value
	   while(Overflow_Counter < Number_Of_Overflows)   // start counting the overflow
 2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <Timer0_Delay_NormalMode+0x150>
	   {
		   // wait until the overflow flag to be set
		   while((TIFR0 & (1<<0)) != 1); // busy wait ( until overflow flag bit to be 1)
 2b6:	08 b6       	in	r0, 0x38	; 56
 2b8:	00 fe       	sbrs	r0, 0
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <Timer0_Delay_NormalMode+0x140>
		   // clear the overflow flag (by writing logic 1 to the flag)
		   SET_BIT(TIFR0,0);
 2bc:	88 b7       	in	r24, 0x38	; 56
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	88 bf       	out	0x38, r24	; 56
		   Overflow_Counter++;  // increment overflow counter
 2c2:	2f 5f       	subi	r18, 0xFF	; 255
 2c4:	3f 4f       	sbci	r19, 0xFF	; 255
	   {
		   Number_Of_Overflows = ceil((double)Dellay_ms/time_max_delay);   // calculate number of needed overflows
		   timer_initial_value = 256.0 - (((double)Dellay_ms/tick_time)/(double)Number_Of_Overflows);   // calculate the initial value to start from
	   }
	   TCNT0 = timer_initial_value;   // set the register to the initial value
	   while(Overflow_Counter < Number_Of_Overflows)   // start counting the overflow
 2c6:	8d 81       	ldd	r24, Y+5	; 0x05
 2c8:	9e 81       	ldd	r25, Y+6	; 0x06
 2ca:	28 17       	cp	r18, r24
 2cc:	39 07       	cpc	r19, r25
 2ce:	98 f3       	brcs	.-26     	; 0x2b6 <Timer0_Delay_NormalMode+0x140>
		   SET_BIT(TIFR0,0);
		   Overflow_Counter++;  // increment overflow counter
	   }
	   Overflow_Counter = 0; // after counting we reset the counter to zero
	   
 2d0:	26 96       	adiw	r28, 0x06	; 6
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	df 90       	pop	r13
 2e6:	cf 90       	pop	r12
 2e8:	bf 90       	pop	r11
 2ea:	af 90       	pop	r10
 2ec:	9f 90       	pop	r9
 2ee:	8f 90       	pop	r8
 2f0:	7f 90       	pop	r7
 2f2:	6f 90       	pop	r6
 2f4:	5f 90       	pop	r5
 2f6:	4f 90       	pop	r4
 2f8:	08 95       	ret

000002fa <testTimer0>:
	DIO_read(PIN2, PORT_A, &value);   // to test DIO_read() function by any port and pin we need
}
// this function is to test Timer0 driver
void testTimer0(void)
{
	Timer0_init(Normal_Mode);   // to test Timer0_init() function with the used mode (normal mode)
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 75 00 	call	0xea	; 0xea <Timer0_init>
	Timer0_start(CLK_1024);   // to test Timer0_start() function with any prescaler we need
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	94 e0       	ldi	r25, 0x04	; 4
 306:	0e 94 77 00 	call	0xee	; 0xee <Timer0_start>
	Timer0_Delay_NormalMode(500 , CLK_1024); // to test Timer0_Delay_NormalMode() funtion with any needed delay 
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	74 e0       	ldi	r23, 0x04	; 4
 30e:	84 ef       	ldi	r24, 0xF4	; 244
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 bb 00 	call	0x176	; 0x176 <Timer0_Delay_NormalMode>
	Timer0_stop();  // to test Timer0_stopp() function
 316:	0e 94 b9 00 	call	0x172	; 0x172 <Timer0_stop>
 31a:	08 95       	ret

0000031c <test>:
{
	
	//testButton();
	//testLED();
	//testDIO();
	testTimer0();
 31c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <testTimer0>
 320:	08 95       	ret

00000322 <__subsf3>:
 322:	50 58       	subi	r21, 0x80	; 128

00000324 <__addsf3>:
 324:	bb 27       	eor	r27, r27
 326:	aa 27       	eor	r26, r26
 328:	0e 94 a9 01 	call	0x352	; 0x352 <__addsf3x>
 32c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__fp_round>
 330:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_pscA>
 334:	38 f0       	brcs	.+14     	; 0x344 <__addsf3+0x20>
 336:	0e 94 55 03 	call	0x6aa	; 0x6aa <__fp_pscB>
 33a:	20 f0       	brcs	.+8      	; 0x344 <__addsf3+0x20>
 33c:	39 f4       	brne	.+14     	; 0x34c <__addsf3+0x28>
 33e:	9f 3f       	cpi	r25, 0xFF	; 255
 340:	19 f4       	brne	.+6      	; 0x348 <__addsf3+0x24>
 342:	26 f4       	brtc	.+8      	; 0x34c <__addsf3+0x28>
 344:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_nan>
 348:	0e f4       	brtc	.+2      	; 0x34c <__addsf3+0x28>
 34a:	e0 95       	com	r30
 34c:	e7 fb       	bst	r30, 7
 34e:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_inf>

00000352 <__addsf3x>:
 352:	e9 2f       	mov	r30, r25
 354:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_split3>
 358:	58 f3       	brcs	.-42     	; 0x330 <__addsf3+0xc>
 35a:	ba 17       	cp	r27, r26
 35c:	62 07       	cpc	r22, r18
 35e:	73 07       	cpc	r23, r19
 360:	84 07       	cpc	r24, r20
 362:	95 07       	cpc	r25, r21
 364:	20 f0       	brcs	.+8      	; 0x36e <__addsf3x+0x1c>
 366:	79 f4       	brne	.+30     	; 0x386 <__addsf3x+0x34>
 368:	a6 f5       	brtc	.+104    	; 0x3d2 <__addsf3x+0x80>
 36a:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__fp_zero>
 36e:	0e f4       	brtc	.+2      	; 0x372 <__addsf3x+0x20>
 370:	e0 95       	com	r30
 372:	0b 2e       	mov	r0, r27
 374:	ba 2f       	mov	r27, r26
 376:	a0 2d       	mov	r26, r0
 378:	0b 01       	movw	r0, r22
 37a:	b9 01       	movw	r22, r18
 37c:	90 01       	movw	r18, r0
 37e:	0c 01       	movw	r0, r24
 380:	ca 01       	movw	r24, r20
 382:	a0 01       	movw	r20, r0
 384:	11 24       	eor	r1, r1
 386:	ff 27       	eor	r31, r31
 388:	59 1b       	sub	r21, r25
 38a:	99 f0       	breq	.+38     	; 0x3b2 <__addsf3x+0x60>
 38c:	59 3f       	cpi	r21, 0xF9	; 249
 38e:	50 f4       	brcc	.+20     	; 0x3a4 <__addsf3x+0x52>
 390:	50 3e       	cpi	r21, 0xE0	; 224
 392:	68 f1       	brcs	.+90     	; 0x3ee <__addsf3x+0x9c>
 394:	1a 16       	cp	r1, r26
 396:	f0 40       	sbci	r31, 0x00	; 0
 398:	a2 2f       	mov	r26, r18
 39a:	23 2f       	mov	r18, r19
 39c:	34 2f       	mov	r19, r20
 39e:	44 27       	eor	r20, r20
 3a0:	58 5f       	subi	r21, 0xF8	; 248
 3a2:	f3 cf       	rjmp	.-26     	; 0x38a <__addsf3x+0x38>
 3a4:	46 95       	lsr	r20
 3a6:	37 95       	ror	r19
 3a8:	27 95       	ror	r18
 3aa:	a7 95       	ror	r26
 3ac:	f0 40       	sbci	r31, 0x00	; 0
 3ae:	53 95       	inc	r21
 3b0:	c9 f7       	brne	.-14     	; 0x3a4 <__addsf3x+0x52>
 3b2:	7e f4       	brtc	.+30     	; 0x3d2 <__addsf3x+0x80>
 3b4:	1f 16       	cp	r1, r31
 3b6:	ba 0b       	sbc	r27, r26
 3b8:	62 0b       	sbc	r22, r18
 3ba:	73 0b       	sbc	r23, r19
 3bc:	84 0b       	sbc	r24, r20
 3be:	ba f0       	brmi	.+46     	; 0x3ee <__addsf3x+0x9c>
 3c0:	91 50       	subi	r25, 0x01	; 1
 3c2:	a1 f0       	breq	.+40     	; 0x3ec <__addsf3x+0x9a>
 3c4:	ff 0f       	add	r31, r31
 3c6:	bb 1f       	adc	r27, r27
 3c8:	66 1f       	adc	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	88 1f       	adc	r24, r24
 3ce:	c2 f7       	brpl	.-16     	; 0x3c0 <__addsf3x+0x6e>
 3d0:	0e c0       	rjmp	.+28     	; 0x3ee <__addsf3x+0x9c>
 3d2:	ba 0f       	add	r27, r26
 3d4:	62 1f       	adc	r22, r18
 3d6:	73 1f       	adc	r23, r19
 3d8:	84 1f       	adc	r24, r20
 3da:	48 f4       	brcc	.+18     	; 0x3ee <__addsf3x+0x9c>
 3dc:	87 95       	ror	r24
 3de:	77 95       	ror	r23
 3e0:	67 95       	ror	r22
 3e2:	b7 95       	ror	r27
 3e4:	f7 95       	ror	r31
 3e6:	9e 3f       	cpi	r25, 0xFE	; 254
 3e8:	08 f0       	brcs	.+2      	; 0x3ec <__addsf3x+0x9a>
 3ea:	b0 cf       	rjmp	.-160    	; 0x34c <__addsf3+0x28>
 3ec:	93 95       	inc	r25
 3ee:	88 0f       	add	r24, r24
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__addsf3x+0xa2>
 3f2:	99 27       	eor	r25, r25
 3f4:	ee 0f       	add	r30, r30
 3f6:	97 95       	ror	r25
 3f8:	87 95       	ror	r24
 3fa:	08 95       	ret

000003fc <ceil>:
 3fc:	0e 94 8f 03 	call	0x71e	; 0x71e <__fp_trunc>
 400:	90 f0       	brcs	.+36     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 402:	9f 37       	cpi	r25, 0x7F	; 127
 404:	48 f4       	brcc	.+18     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 406:	91 11       	cpse	r25, r1
 408:	16 f4       	brtc	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	0c 94 a8 03 	jmp	0x750	; 0x750 <__fp_szero>
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	80 e8       	ldi	r24, 0x80	; 128
 414:	9f e3       	ldi	r25, 0x3F	; 63
 416:	08 95       	ret
 418:	26 f0       	brts	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41a:	1b 16       	cp	r1, r27
 41c:	61 1d       	adc	r22, r1
 41e:	71 1d       	adc	r23, r1
 420:	81 1d       	adc	r24, r1
 422:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_mintl>
 426:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_mpack>

0000042a <__cmpsf2>:
 42a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_cmp>
 42e:	08 f4       	brcc	.+2      	; 0x432 <__cmpsf2+0x8>
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	08 95       	ret

00000434 <__divsf3>:
 434:	0e 94 2e 02 	call	0x45c	; 0x45c <__divsf3x>
 438:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__fp_round>
 43c:	0e 94 55 03 	call	0x6aa	; 0x6aa <__fp_pscB>
 440:	58 f0       	brcs	.+22     	; 0x458 <__divsf3+0x24>
 442:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_pscA>
 446:	40 f0       	brcs	.+16     	; 0x458 <__divsf3+0x24>
 448:	29 f4       	brne	.+10     	; 0x454 <__divsf3+0x20>
 44a:	5f 3f       	cpi	r21, 0xFF	; 255
 44c:	29 f0       	breq	.+10     	; 0x458 <__divsf3+0x24>
 44e:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_inf>
 452:	51 11       	cpse	r21, r1
 454:	0c 94 a8 03 	jmp	0x750	; 0x750 <__fp_szero>
 458:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_nan>

0000045c <__divsf3x>:
 45c:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_split3>
 460:	68 f3       	brcs	.-38     	; 0x43c <__divsf3+0x8>

00000462 <__divsf3_pse>:
 462:	99 23       	and	r25, r25
 464:	b1 f3       	breq	.-20     	; 0x452 <__divsf3+0x1e>
 466:	55 23       	and	r21, r21
 468:	91 f3       	breq	.-28     	; 0x44e <__divsf3+0x1a>
 46a:	95 1b       	sub	r25, r21
 46c:	55 0b       	sbc	r21, r21
 46e:	bb 27       	eor	r27, r27
 470:	aa 27       	eor	r26, r26
 472:	62 17       	cp	r22, r18
 474:	73 07       	cpc	r23, r19
 476:	84 07       	cpc	r24, r20
 478:	38 f0       	brcs	.+14     	; 0x488 <__divsf3_pse+0x26>
 47a:	9f 5f       	subi	r25, 0xFF	; 255
 47c:	5f 4f       	sbci	r21, 0xFF	; 255
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	44 1f       	adc	r20, r20
 484:	aa 1f       	adc	r26, r26
 486:	a9 f3       	breq	.-22     	; 0x472 <__divsf3_pse+0x10>
 488:	35 d0       	rcall	.+106    	; 0x4f4 <__divsf3_pse+0x92>
 48a:	0e 2e       	mov	r0, r30
 48c:	3a f0       	brmi	.+14     	; 0x49c <__divsf3_pse+0x3a>
 48e:	e0 e8       	ldi	r30, 0x80	; 128
 490:	32 d0       	rcall	.+100    	; 0x4f6 <__divsf3_pse+0x94>
 492:	91 50       	subi	r25, 0x01	; 1
 494:	50 40       	sbci	r21, 0x00	; 0
 496:	e6 95       	lsr	r30
 498:	00 1c       	adc	r0, r0
 49a:	ca f7       	brpl	.-14     	; 0x48e <__divsf3_pse+0x2c>
 49c:	2b d0       	rcall	.+86     	; 0x4f4 <__divsf3_pse+0x92>
 49e:	fe 2f       	mov	r31, r30
 4a0:	29 d0       	rcall	.+82     	; 0x4f4 <__divsf3_pse+0x92>
 4a2:	66 0f       	add	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	88 1f       	adc	r24, r24
 4a8:	bb 1f       	adc	r27, r27
 4aa:	26 17       	cp	r18, r22
 4ac:	37 07       	cpc	r19, r23
 4ae:	48 07       	cpc	r20, r24
 4b0:	ab 07       	cpc	r26, r27
 4b2:	b0 e8       	ldi	r27, 0x80	; 128
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <__divsf3_pse+0x56>
 4b6:	bb 0b       	sbc	r27, r27
 4b8:	80 2d       	mov	r24, r0
 4ba:	bf 01       	movw	r22, r30
 4bc:	ff 27       	eor	r31, r31
 4be:	93 58       	subi	r25, 0x83	; 131
 4c0:	5f 4f       	sbci	r21, 0xFF	; 255
 4c2:	3a f0       	brmi	.+14     	; 0x4d2 <__divsf3_pse+0x70>
 4c4:	9e 3f       	cpi	r25, 0xFE	; 254
 4c6:	51 05       	cpc	r21, r1
 4c8:	78 f0       	brcs	.+30     	; 0x4e8 <__divsf3_pse+0x86>
 4ca:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_inf>
 4ce:	0c 94 a8 03 	jmp	0x750	; 0x750 <__fp_szero>
 4d2:	5f 3f       	cpi	r21, 0xFF	; 255
 4d4:	e4 f3       	brlt	.-8      	; 0x4ce <__divsf3_pse+0x6c>
 4d6:	98 3e       	cpi	r25, 0xE8	; 232
 4d8:	d4 f3       	brlt	.-12     	; 0x4ce <__divsf3_pse+0x6c>
 4da:	86 95       	lsr	r24
 4dc:	77 95       	ror	r23
 4de:	67 95       	ror	r22
 4e0:	b7 95       	ror	r27
 4e2:	f7 95       	ror	r31
 4e4:	9f 5f       	subi	r25, 0xFF	; 255
 4e6:	c9 f7       	brne	.-14     	; 0x4da <__divsf3_pse+0x78>
 4e8:	88 0f       	add	r24, r24
 4ea:	91 1d       	adc	r25, r1
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	97 f9       	bld	r25, 7
 4f2:	08 95       	ret
 4f4:	e1 e0       	ldi	r30, 0x01	; 1
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	bb 1f       	adc	r27, r27
 4fe:	62 17       	cp	r22, r18
 500:	73 07       	cpc	r23, r19
 502:	84 07       	cpc	r24, r20
 504:	ba 07       	cpc	r27, r26
 506:	20 f0       	brcs	.+8      	; 0x510 <__divsf3_pse+0xae>
 508:	62 1b       	sub	r22, r18
 50a:	73 0b       	sbc	r23, r19
 50c:	84 0b       	sbc	r24, r20
 50e:	ba 0b       	sbc	r27, r26
 510:	ee 1f       	adc	r30, r30
 512:	88 f7       	brcc	.-30     	; 0x4f6 <__divsf3_pse+0x94>
 514:	e0 95       	com	r30
 516:	08 95       	ret

00000518 <__fixunssfsi>:
 518:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_splitA>
 51c:	88 f0       	brcs	.+34     	; 0x540 <__fixunssfsi+0x28>
 51e:	9f 57       	subi	r25, 0x7F	; 127
 520:	98 f0       	brcs	.+38     	; 0x548 <__fixunssfsi+0x30>
 522:	b9 2f       	mov	r27, r25
 524:	99 27       	eor	r25, r25
 526:	b7 51       	subi	r27, 0x17	; 23
 528:	b0 f0       	brcs	.+44     	; 0x556 <__fixunssfsi+0x3e>
 52a:	e1 f0       	breq	.+56     	; 0x564 <__fixunssfsi+0x4c>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	88 1f       	adc	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	1a f0       	brmi	.+6      	; 0x53c <__fixunssfsi+0x24>
 536:	ba 95       	dec	r27
 538:	c9 f7       	brne	.-14     	; 0x52c <__fixunssfsi+0x14>
 53a:	14 c0       	rjmp	.+40     	; 0x564 <__fixunssfsi+0x4c>
 53c:	b1 30       	cpi	r27, 0x01	; 1
 53e:	91 f0       	breq	.+36     	; 0x564 <__fixunssfsi+0x4c>
 540:	0e 94 a7 03 	call	0x74e	; 0x74e <__fp_zero>
 544:	b1 e0       	ldi	r27, 0x01	; 1
 546:	08 95       	ret
 548:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__fp_zero>
 54c:	67 2f       	mov	r22, r23
 54e:	78 2f       	mov	r23, r24
 550:	88 27       	eor	r24, r24
 552:	b8 5f       	subi	r27, 0xF8	; 248
 554:	39 f0       	breq	.+14     	; 0x564 <__fixunssfsi+0x4c>
 556:	b9 3f       	cpi	r27, 0xF9	; 249
 558:	cc f3       	brlt	.-14     	; 0x54c <__fixunssfsi+0x34>
 55a:	86 95       	lsr	r24
 55c:	77 95       	ror	r23
 55e:	67 95       	ror	r22
 560:	b3 95       	inc	r27
 562:	d9 f7       	brne	.-10     	; 0x55a <__fixunssfsi+0x42>
 564:	3e f4       	brtc	.+14     	; 0x574 <__fixunssfsi+0x5c>
 566:	90 95       	com	r25
 568:	80 95       	com	r24
 56a:	70 95       	com	r23
 56c:	61 95       	neg	r22
 56e:	7f 4f       	sbci	r23, 0xFF	; 255
 570:	8f 4f       	sbci	r24, 0xFF	; 255
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	08 95       	ret

00000576 <__floatunsisf>:
 576:	e8 94       	clt
 578:	09 c0       	rjmp	.+18     	; 0x58c <__floatsisf+0x12>

0000057a <__floatsisf>:
 57a:	97 fb       	bst	r25, 7
 57c:	3e f4       	brtc	.+14     	; 0x58c <__floatsisf+0x12>
 57e:	90 95       	com	r25
 580:	80 95       	com	r24
 582:	70 95       	com	r23
 584:	61 95       	neg	r22
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	8f 4f       	sbci	r24, 0xFF	; 255
 58a:	9f 4f       	sbci	r25, 0xFF	; 255
 58c:	99 23       	and	r25, r25
 58e:	a9 f0       	breq	.+42     	; 0x5ba <__floatsisf+0x40>
 590:	f9 2f       	mov	r31, r25
 592:	96 e9       	ldi	r25, 0x96	; 150
 594:	bb 27       	eor	r27, r27
 596:	93 95       	inc	r25
 598:	f6 95       	lsr	r31
 59a:	87 95       	ror	r24
 59c:	77 95       	ror	r23
 59e:	67 95       	ror	r22
 5a0:	b7 95       	ror	r27
 5a2:	f1 11       	cpse	r31, r1
 5a4:	f8 cf       	rjmp	.-16     	; 0x596 <__floatsisf+0x1c>
 5a6:	fa f4       	brpl	.+62     	; 0x5e6 <__floatsisf+0x6c>
 5a8:	bb 0f       	add	r27, r27
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <__floatsisf+0x36>
 5ac:	60 ff       	sbrs	r22, 0
 5ae:	1b c0       	rjmp	.+54     	; 0x5e6 <__floatsisf+0x6c>
 5b0:	6f 5f       	subi	r22, 0xFF	; 255
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	16 c0       	rjmp	.+44     	; 0x5e6 <__floatsisf+0x6c>
 5ba:	88 23       	and	r24, r24
 5bc:	11 f0       	breq	.+4      	; 0x5c2 <__floatsisf+0x48>
 5be:	96 e9       	ldi	r25, 0x96	; 150
 5c0:	11 c0       	rjmp	.+34     	; 0x5e4 <__floatsisf+0x6a>
 5c2:	77 23       	and	r23, r23
 5c4:	21 f0       	breq	.+8      	; 0x5ce <__floatsisf+0x54>
 5c6:	9e e8       	ldi	r25, 0x8E	; 142
 5c8:	87 2f       	mov	r24, r23
 5ca:	76 2f       	mov	r23, r22
 5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <__floatsisf+0x5e>
 5ce:	66 23       	and	r22, r22
 5d0:	71 f0       	breq	.+28     	; 0x5ee <__floatsisf+0x74>
 5d2:	96 e8       	ldi	r25, 0x86	; 134
 5d4:	86 2f       	mov	r24, r22
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	2a f0       	brmi	.+10     	; 0x5e6 <__floatsisf+0x6c>
 5dc:	9a 95       	dec	r25
 5de:	66 0f       	add	r22, r22
 5e0:	77 1f       	adc	r23, r23
 5e2:	88 1f       	adc	r24, r24
 5e4:	da f7       	brpl	.-10     	; 0x5dc <__floatsisf+0x62>
 5e6:	88 0f       	add	r24, r24
 5e8:	96 95       	lsr	r25
 5ea:	87 95       	ror	r24
 5ec:	97 f9       	bld	r25, 7
 5ee:	08 95       	ret

000005f0 <__fp_cmp>:
 5f0:	99 0f       	add	r25, r25
 5f2:	00 08       	sbc	r0, r0
 5f4:	55 0f       	add	r21, r21
 5f6:	aa 0b       	sbc	r26, r26
 5f8:	e0 e8       	ldi	r30, 0x80	; 128
 5fa:	fe ef       	ldi	r31, 0xFE	; 254
 5fc:	16 16       	cp	r1, r22
 5fe:	17 06       	cpc	r1, r23
 600:	e8 07       	cpc	r30, r24
 602:	f9 07       	cpc	r31, r25
 604:	c0 f0       	brcs	.+48     	; 0x636 <__fp_cmp+0x46>
 606:	12 16       	cp	r1, r18
 608:	13 06       	cpc	r1, r19
 60a:	e4 07       	cpc	r30, r20
 60c:	f5 07       	cpc	r31, r21
 60e:	98 f0       	brcs	.+38     	; 0x636 <__fp_cmp+0x46>
 610:	62 1b       	sub	r22, r18
 612:	73 0b       	sbc	r23, r19
 614:	84 0b       	sbc	r24, r20
 616:	95 0b       	sbc	r25, r21
 618:	39 f4       	brne	.+14     	; 0x628 <__fp_cmp+0x38>
 61a:	0a 26       	eor	r0, r26
 61c:	61 f0       	breq	.+24     	; 0x636 <__fp_cmp+0x46>
 61e:	23 2b       	or	r18, r19
 620:	24 2b       	or	r18, r20
 622:	25 2b       	or	r18, r21
 624:	21 f4       	brne	.+8      	; 0x62e <__fp_cmp+0x3e>
 626:	08 95       	ret
 628:	0a 26       	eor	r0, r26
 62a:	09 f4       	brne	.+2      	; 0x62e <__fp_cmp+0x3e>
 62c:	a1 40       	sbci	r26, 0x01	; 1
 62e:	a6 95       	lsr	r26
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	81 1d       	adc	r24, r1
 634:	81 1d       	adc	r24, r1
 636:	08 95       	ret

00000638 <__fp_inf>:
 638:	97 f9       	bld	r25, 7
 63a:	9f 67       	ori	r25, 0x7F	; 127
 63c:	80 e8       	ldi	r24, 0x80	; 128
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	08 95       	ret

00000644 <__fp_mintl>:
 644:	88 23       	and	r24, r24
 646:	71 f4       	brne	.+28     	; 0x664 <__fp_mintl+0x20>
 648:	77 23       	and	r23, r23
 64a:	21 f0       	breq	.+8      	; 0x654 <__fp_mintl+0x10>
 64c:	98 50       	subi	r25, 0x08	; 8
 64e:	87 2b       	or	r24, r23
 650:	76 2f       	mov	r23, r22
 652:	07 c0       	rjmp	.+14     	; 0x662 <__fp_mintl+0x1e>
 654:	66 23       	and	r22, r22
 656:	11 f4       	brne	.+4      	; 0x65c <__fp_mintl+0x18>
 658:	99 27       	eor	r25, r25
 65a:	0d c0       	rjmp	.+26     	; 0x676 <__fp_mintl+0x32>
 65c:	90 51       	subi	r25, 0x10	; 16
 65e:	86 2b       	or	r24, r22
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	2a f0       	brmi	.+10     	; 0x670 <__fp_mintl+0x2c>
 666:	9a 95       	dec	r25
 668:	66 0f       	add	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	88 1f       	adc	r24, r24
 66e:	da f7       	brpl	.-10     	; 0x666 <__fp_mintl+0x22>
 670:	88 0f       	add	r24, r24
 672:	96 95       	lsr	r25
 674:	87 95       	ror	r24
 676:	97 f9       	bld	r25, 7
 678:	08 95       	ret

0000067a <__fp_mpack>:
 67a:	9f 3f       	cpi	r25, 0xFF	; 255
 67c:	31 f0       	breq	.+12     	; 0x68a <__fp_mpack_finite+0xc>

0000067e <__fp_mpack_finite>:
 67e:	91 50       	subi	r25, 0x01	; 1
 680:	20 f4       	brcc	.+8      	; 0x68a <__fp_mpack_finite+0xc>
 682:	87 95       	ror	r24
 684:	77 95       	ror	r23
 686:	67 95       	ror	r22
 688:	b7 95       	ror	r27
 68a:	88 0f       	add	r24, r24
 68c:	91 1d       	adc	r25, r1
 68e:	96 95       	lsr	r25
 690:	87 95       	ror	r24
 692:	97 f9       	bld	r25, 7
 694:	08 95       	ret

00000696 <__fp_nan>:
 696:	9f ef       	ldi	r25, 0xFF	; 255
 698:	80 ec       	ldi	r24, 0xC0	; 192
 69a:	08 95       	ret

0000069c <__fp_pscA>:
 69c:	00 24       	eor	r0, r0
 69e:	0a 94       	dec	r0
 6a0:	16 16       	cp	r1, r22
 6a2:	17 06       	cpc	r1, r23
 6a4:	18 06       	cpc	r1, r24
 6a6:	09 06       	cpc	r0, r25
 6a8:	08 95       	ret

000006aa <__fp_pscB>:
 6aa:	00 24       	eor	r0, r0
 6ac:	0a 94       	dec	r0
 6ae:	12 16       	cp	r1, r18
 6b0:	13 06       	cpc	r1, r19
 6b2:	14 06       	cpc	r1, r20
 6b4:	05 06       	cpc	r0, r21
 6b6:	08 95       	ret

000006b8 <__fp_round>:
 6b8:	09 2e       	mov	r0, r25
 6ba:	03 94       	inc	r0
 6bc:	00 0c       	add	r0, r0
 6be:	11 f4       	brne	.+4      	; 0x6c4 <__fp_round+0xc>
 6c0:	88 23       	and	r24, r24
 6c2:	52 f0       	brmi	.+20     	; 0x6d8 <__fp_round+0x20>
 6c4:	bb 0f       	add	r27, r27
 6c6:	40 f4       	brcc	.+16     	; 0x6d8 <__fp_round+0x20>
 6c8:	bf 2b       	or	r27, r31
 6ca:	11 f4       	brne	.+4      	; 0x6d0 <__fp_round+0x18>
 6cc:	60 ff       	sbrs	r22, 0
 6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <__fp_round+0x20>
 6d0:	6f 5f       	subi	r22, 0xFF	; 255
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	8f 4f       	sbci	r24, 0xFF	; 255
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	08 95       	ret

000006da <__fp_split3>:
 6da:	57 fd       	sbrc	r21, 7
 6dc:	90 58       	subi	r25, 0x80	; 128
 6de:	44 0f       	add	r20, r20
 6e0:	55 1f       	adc	r21, r21
 6e2:	59 f0       	breq	.+22     	; 0x6fa <__fp_splitA+0x10>
 6e4:	5f 3f       	cpi	r21, 0xFF	; 255
 6e6:	71 f0       	breq	.+28     	; 0x704 <__fp_splitA+0x1a>
 6e8:	47 95       	ror	r20

000006ea <__fp_splitA>:
 6ea:	88 0f       	add	r24, r24
 6ec:	97 fb       	bst	r25, 7
 6ee:	99 1f       	adc	r25, r25
 6f0:	61 f0       	breq	.+24     	; 0x70a <__fp_splitA+0x20>
 6f2:	9f 3f       	cpi	r25, 0xFF	; 255
 6f4:	79 f0       	breq	.+30     	; 0x714 <__fp_splitA+0x2a>
 6f6:	87 95       	ror	r24
 6f8:	08 95       	ret
 6fa:	12 16       	cp	r1, r18
 6fc:	13 06       	cpc	r1, r19
 6fe:	14 06       	cpc	r1, r20
 700:	55 1f       	adc	r21, r21
 702:	f2 cf       	rjmp	.-28     	; 0x6e8 <__fp_split3+0xe>
 704:	46 95       	lsr	r20
 706:	f1 df       	rcall	.-30     	; 0x6ea <__fp_splitA>
 708:	08 c0       	rjmp	.+16     	; 0x71a <__fp_splitA+0x30>
 70a:	16 16       	cp	r1, r22
 70c:	17 06       	cpc	r1, r23
 70e:	18 06       	cpc	r1, r24
 710:	99 1f       	adc	r25, r25
 712:	f1 cf       	rjmp	.-30     	; 0x6f6 <__fp_splitA+0xc>
 714:	86 95       	lsr	r24
 716:	71 05       	cpc	r23, r1
 718:	61 05       	cpc	r22, r1
 71a:	08 94       	sec
 71c:	08 95       	ret

0000071e <__fp_trunc>:
 71e:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_splitA>
 722:	a0 f0       	brcs	.+40     	; 0x74c <__fp_trunc+0x2e>
 724:	be e7       	ldi	r27, 0x7E	; 126
 726:	b9 17       	cp	r27, r25
 728:	88 f4       	brcc	.+34     	; 0x74c <__fp_trunc+0x2e>
 72a:	bb 27       	eor	r27, r27
 72c:	9f 38       	cpi	r25, 0x8F	; 143
 72e:	60 f4       	brcc	.+24     	; 0x748 <__fp_trunc+0x2a>
 730:	16 16       	cp	r1, r22
 732:	b1 1d       	adc	r27, r1
 734:	67 2f       	mov	r22, r23
 736:	78 2f       	mov	r23, r24
 738:	88 27       	eor	r24, r24
 73a:	98 5f       	subi	r25, 0xF8	; 248
 73c:	f7 cf       	rjmp	.-18     	; 0x72c <__fp_trunc+0xe>
 73e:	86 95       	lsr	r24
 740:	77 95       	ror	r23
 742:	67 95       	ror	r22
 744:	b1 1d       	adc	r27, r1
 746:	93 95       	inc	r25
 748:	96 39       	cpi	r25, 0x96	; 150
 74a:	c8 f3       	brcs	.-14     	; 0x73e <__fp_trunc+0x20>
 74c:	08 95       	ret

0000074e <__fp_zero>:
 74e:	e8 94       	clt

00000750 <__fp_szero>:
 750:	bb 27       	eor	r27, r27
 752:	66 27       	eor	r22, r22
 754:	77 27       	eor	r23, r23
 756:	cb 01       	movw	r24, r22
 758:	97 f9       	bld	r25, 7
 75a:	08 95       	ret

0000075c <__gesf2>:
 75c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fp_cmp>
 760:	08 f4       	brcc	.+2      	; 0x764 <__gesf2+0x8>
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	08 95       	ret

00000766 <__mulsf3>:
 766:	0e 94 c6 03 	call	0x78c	; 0x78c <__mulsf3x>
 76a:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__fp_round>
 76e:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_pscA>
 772:	38 f0       	brcs	.+14     	; 0x782 <__mulsf3+0x1c>
 774:	0e 94 55 03 	call	0x6aa	; 0x6aa <__fp_pscB>
 778:	20 f0       	brcs	.+8      	; 0x782 <__mulsf3+0x1c>
 77a:	95 23       	and	r25, r21
 77c:	11 f0       	breq	.+4      	; 0x782 <__mulsf3+0x1c>
 77e:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_inf>
 782:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_nan>
 786:	11 24       	eor	r1, r1
 788:	0c 94 a8 03 	jmp	0x750	; 0x750 <__fp_szero>

0000078c <__mulsf3x>:
 78c:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_split3>
 790:	70 f3       	brcs	.-36     	; 0x76e <__mulsf3+0x8>

00000792 <__mulsf3_pse>:
 792:	95 9f       	mul	r25, r21
 794:	c1 f3       	breq	.-16     	; 0x786 <__mulsf3+0x20>
 796:	95 0f       	add	r25, r21
 798:	50 e0       	ldi	r21, 0x00	; 0
 79a:	55 1f       	adc	r21, r21
 79c:	62 9f       	mul	r22, r18
 79e:	f0 01       	movw	r30, r0
 7a0:	72 9f       	mul	r23, r18
 7a2:	bb 27       	eor	r27, r27
 7a4:	f0 0d       	add	r31, r0
 7a6:	b1 1d       	adc	r27, r1
 7a8:	63 9f       	mul	r22, r19
 7aa:	aa 27       	eor	r26, r26
 7ac:	f0 0d       	add	r31, r0
 7ae:	b1 1d       	adc	r27, r1
 7b0:	aa 1f       	adc	r26, r26
 7b2:	64 9f       	mul	r22, r20
 7b4:	66 27       	eor	r22, r22
 7b6:	b0 0d       	add	r27, r0
 7b8:	a1 1d       	adc	r26, r1
 7ba:	66 1f       	adc	r22, r22
 7bc:	82 9f       	mul	r24, r18
 7be:	22 27       	eor	r18, r18
 7c0:	b0 0d       	add	r27, r0
 7c2:	a1 1d       	adc	r26, r1
 7c4:	62 1f       	adc	r22, r18
 7c6:	73 9f       	mul	r23, r19
 7c8:	b0 0d       	add	r27, r0
 7ca:	a1 1d       	adc	r26, r1
 7cc:	62 1f       	adc	r22, r18
 7ce:	83 9f       	mul	r24, r19
 7d0:	a0 0d       	add	r26, r0
 7d2:	61 1d       	adc	r22, r1
 7d4:	22 1f       	adc	r18, r18
 7d6:	74 9f       	mul	r23, r20
 7d8:	33 27       	eor	r19, r19
 7da:	a0 0d       	add	r26, r0
 7dc:	61 1d       	adc	r22, r1
 7de:	23 1f       	adc	r18, r19
 7e0:	84 9f       	mul	r24, r20
 7e2:	60 0d       	add	r22, r0
 7e4:	21 1d       	adc	r18, r1
 7e6:	82 2f       	mov	r24, r18
 7e8:	76 2f       	mov	r23, r22
 7ea:	6a 2f       	mov	r22, r26
 7ec:	11 24       	eor	r1, r1
 7ee:	9f 57       	subi	r25, 0x7F	; 127
 7f0:	50 40       	sbci	r21, 0x00	; 0
 7f2:	9a f0       	brmi	.+38     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7f4:	f1 f0       	breq	.+60     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 7f6:	88 23       	and	r24, r24
 7f8:	4a f0       	brmi	.+18     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7fa:	ee 0f       	add	r30, r30
 7fc:	ff 1f       	adc	r31, r31
 7fe:	bb 1f       	adc	r27, r27
 800:	66 1f       	adc	r22, r22
 802:	77 1f       	adc	r23, r23
 804:	88 1f       	adc	r24, r24
 806:	91 50       	subi	r25, 0x01	; 1
 808:	50 40       	sbci	r21, 0x00	; 0
 80a:	a9 f7       	brne	.-22     	; 0x7f6 <__mulsf3_pse+0x64>
 80c:	9e 3f       	cpi	r25, 0xFE	; 254
 80e:	51 05       	cpc	r21, r1
 810:	80 f0       	brcs	.+32     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 812:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_inf>
 816:	0c 94 a8 03 	jmp	0x750	; 0x750 <__fp_szero>
 81a:	5f 3f       	cpi	r21, 0xFF	; 255
 81c:	e4 f3       	brlt	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 81e:	98 3e       	cpi	r25, 0xE8	; 232
 820:	d4 f3       	brlt	.-12     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 822:	86 95       	lsr	r24
 824:	77 95       	ror	r23
 826:	67 95       	ror	r22
 828:	b7 95       	ror	r27
 82a:	f7 95       	ror	r31
 82c:	e7 95       	ror	r30
 82e:	9f 5f       	subi	r25, 0xFF	; 255
 830:	c1 f7       	brne	.-16     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 832:	fe 2b       	or	r31, r30
 834:	88 0f       	add	r24, r24
 836:	91 1d       	adc	r25, r1
 838:	96 95       	lsr	r25
 83a:	87 95       	ror	r24
 83c:	97 f9       	bld	r25, 7
 83e:	08 95       	ret

00000840 <_exit>:
 840:	f8 94       	cli

00000842 <__stop_program>:
 842:	ff cf       	rjmp	.-2      	; 0x842 <__stop_program>
